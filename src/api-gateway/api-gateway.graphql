# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

# A stored representation of a Web3 address.
type Address {
  fetchedCoinBalance: String
  fetchedCoinBalanceBlockNumber: Int
  fetchedCoinBalanceWithDecimal: String
  gasUsed: Float
  hash: Buffer!
  hashQr: String
  nonce: Float
  numTxs: Float
  transactions(
    # Paginate after opaque cursor
    after: String

    # Paginate before opaque cursor
    before: String

    # Paginate first
    first: Float

    # Paginate last
    last: Float
  ): TransactionConnection
}

# A package of data that contains zero or more transactions, the hash of the previous block ("parent"), and optionally other data. Because each block (except for the initial "genesis block") points to the previous block, the data structure that they form is called a "blockchain".
#
type Block {
  consensus: Boolean
  difficulty: String
  gasLimit: String
  gasUsed: String
  hash: Buffer
  miner: Buffer
  nonce: Buffer
  numTxs: Int
  number: Int
  parentHash: Buffer
  size: Int
  timestamp: DateTime
  totalDifficulty: String
}

type BlockConnection {
  edges: [BlockEdge]
  pageInfo: PageInfo
}

type BlockEdge {
  # Used in `before` and `after` args
  cursor: String
  node: Block
}

scalar Buffer

type ChainMeta {
  avgBlockTimeSec: Float
  blockHeight: Float
  totalAddresses: Float
  totalTransactions: Float
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

type Query {
  address(hash: Buffer!): Address

  # Gets a block by number
  block(number: Int!): Block

  # Gets blocks by a range of number
  blocks(
    # Paginate after opaque cursor
    after: String

    # Paginate before opaque cursor
    before: String

    # Paginate first
    first: Float

    # Paginate last
    last: Float
  ): BlockConnection

  # Gets the blockchain's metadata
  chainMeta: ChainMeta

  # is the server healthy?
  health: String
  token(tokenContractAddressHash: Buffer!): Token
  tokenTransfer(transactionHash: Buffer): TokenTransferConnection
  tokens(
    # Paginate after opaque cursor
    after: String

    # Paginate before opaque cursor
    before: String

    # Paginate first
    first: Float

    # Paginate last
    last: Float

    # token symbol
    symbol: String
  ): TokenConnection
  transaction(hash: Buffer!): Transaction
  transactions(
    # Paginate after opaque cursor
    after: String

    # Paginate before opaque cursor
    before: String
    blockNumber: Int

    # Paginate first
    first: Float

    # Paginate last
    last: Float
  ): TransactionConnection
}

enum Status {
  ERROR
  OK
}

type Token {
  contractAddress: Buffer
  decimals: String
  name: String
  skipMetadata: Boolean
  symbol: String
  totalSupply: String
  type: String
}

type TokenConnection {
  edges: [TokenEdge]
  pageInfo: PageInfo
}

type TokenEdge {
  # Used in `before` and `after` args
  cursor: String
  node: Token
}

# Models a token transfer.
type TokenTransfer {
  amount: String
  amountWithDecimals: String
  amounts: [String]
  block: Buffer
  blockNumber: Int
  createdAt: DateTime
  fromAddress: Buffer
  id: ID
  logIndex: Int
  toAddress: Buffer
  tokenContractAddress: Buffer
  tokenId: String
  tokenIds: [String]
  transactionHash: Buffer
  type: String
  updatedAt: DateTime
}

type TokenTransferConnection {
  edges: [TokenTransferEdge]
  pageInfo: PageInfo
}

type TokenTransferEdge {
  # Used in `before` and `after` args
  cursor: String
  node: TokenTransfer
}

# Models a Web3 transaction.
type Transaction {
  blockNumber: Int
  createdContractAddressHash: String
  cumulativeGasUsed: String
  error: String
  fromAddressHash: Buffer
  gas: String
  gasPrice: String
  gasPriceWithDecimal: String
  gasUsed: String
  gasUsedWithDecimal: String
  hash: Buffer

  # The ID of an object
  id: ID!
  index: Int
  input: Buffer
  maxFeePerGas: String
  maxFeePerGasWithDecimal: String
  maxPriorityFeePerGas: String
  maxPriorityFeePerGasWithDecimal: String
  nonce: Int
  r: String
  revertReason: String
  s: String
  status: Status
  timestamp: DateTime
  toAddressHash: Buffer
  type: Int
  v: String
  value: String
  valueWithDecimal: String
}

type TransactionConnection {
  edges: [TransactionEdge]
  pageInfo: PageInfo
}

type TransactionEdge {
  # Used in `before` and `after` args
  cursor: String
  node: Transaction
}
